" Plugins
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
execute pathogen#infect()

Bundle 'gmarik/vundle'
Bundle 'matchit.zip'
Bundle 'The-NERD-Commenter'
Bundle 'vim-powerline'
Bundle 'Command-T'
Bundle 'instant-markdown'

" Plugin options
let g:Powerline_symbols = 'unicode'
let g:CommandTMaxFiles=5000
let g:CommandTMaxHeight=12
map <C-o> :CommandT<CR>
let g:CommandTAcceptSelectionMap = '<CR>'
let g:CommandTCancelMap = '<C-g>'

" Show powerline on singlewindow
set laststatus=2

" Encoding
set encoding=utf-8

" Forget being compatible with good ol' vi
set nocompatible

" Get that filetype stuff happening
filetype on
filetype plugin on
filetype indent on

" Turn on that syntax highlighting
syntax on

" Turn on 256 colors
set t_Co=256

" Why is this not a default
set hidden

" From PK3
set showcmd
set noswapfile

" Don't update the display while executing macros
set lazyredraw

" At least let yourself know what mode you're in
set showmode

" Enable enhanced command-line completion. Presumes you have compiled
" with +wildmenu.  See :help 'wildmenu'
set wildmenu

" Let's make it easy to edit this file (mnemonic for the key sequence is
" 'e'dit 'v'imrc)
nmap <silent> ,ev :e $MYVIMRC<cr>

" And to source this file as well (mnemonic for the key sequence is
" 's'ource 'v'imrc)
nmap <silent> ,sv :so $MYVIMRC<cr>

" ; == :
nmap <space> :

" pdflatex compiling
setlocal makeprg=pdflatex\ \-file\-line\-error\ \-interaction=nonstopmode\ $*\\\|\ grep\ \-E\ '\\w+:[0-9]{1,4}:\\\ ' 
setlocal errorformat=%f:%l:\ %m
" Autoselect compiler
au BufRead * try | execute "compiler ".&filetype | catch /./ | endtry
map <buffer> <F3> :w<CR>:make %<<CR>
map <buffer> <F4> :!evince %<.pdf &<CR>
map <silent> <F7> :cnext<CR> 
map <silent> <F8> :clist<CR> 
map <silent> <F10> \rr 
let b:tex_flavor = 'pdflatex'
" compiler tex
map ,p :w<CR>:!pdflatex % &<CR> 

" Tabsettings
set tabstop=4
set shiftwidth=4
set expandtab

" custom
set number
colorscheme mono
set autoindent
set smartindent
set showmatch
set ruler
"set nohls
set incsearch
set virtualedit=all
set pastetoggle=<F2>
set wildignore=*.swp,*.bak
set hlsearch

"Hide GUI bars
set guioptions-=m 
set guioptions-=T

"Folding options
set foldenable
set foldmethod=marker
map <Leader>f  :call CFold()<cr>

"Folding functions
function! CFoldLevel(lnum)
  let line = getline(a:lnum)
  if line =~ '^/\*'
    return '>1' " A new fold of level 1 starts here.
  else
    return '1' " This line has a foldlevel of 1.
  endif
endfunction

function! CFoldText()
  " Look through all of the folded text for the function signature.
  let signature = ''
  let i = v:foldstart
  while signature == '' && i < v:foldend
    let line = getline(i)
    if line =~ '\w\+(.*)$'
      let signature = line
    endif 
    let i = i + 1
  endwhile

  " Return what the fold should show when folded.
  return '+-- ' . (v:foldend - v:foldstart) . ' Lines: ' . signature . ' '
endfunction

function! CFold()               
  set foldenable
  set foldlevel=0   
  set foldmethod=expr
  set foldexpr=CFoldLevel(v:lnum)
  set foldtext=CFoldText()
  set foldnestmax=1
endfunction
